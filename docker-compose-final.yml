# Containerized E-commerce Microservices Infrastructure

services:
  # API Gateway
  nginx:
    build: ./nginx
    container_name: phone-accessories-gateway
    ports:
      - "80:80"
    networks:
      - microservices-network
    depends_on:
      - auth-service
      - product-service
      - order-service
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build: ./auth-service
    container_name: phone-accessories-auth
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGO_URI=mongodb://root:rootpassword@mongo:27017/auth-service?authSource=admin
      - JWT_SECRET=phonesAccessoriesSecretKey123
      - JWT_EXPIRY=30d
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs/auth:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build: ./product-service
    container_name: phone-accessories-products
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=products
      - DB_PORT=5432
      - JWT_SECRET=phonesAccessoriesSecretKey123
    ports:
      - "8080:8080"
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs/products:/root/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build: ./order-service
    container_name: phone-accessories-orders
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGO_URI=mongodb://root:rootpassword@mongo:27017/order-service?authSource=admin
      - JWT_SECRET=phonesAccessoriesSecretKey123
    ports:
      - "3002:3002"
    networks:
      - microservices-network
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs/orders:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (for Auth and Order services)
  mongo:
    image: mongo:5.0
    container_name: phone-accessories-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword
    volumes:
      - mongo-data:/data/db
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Mongo Express (MongoDB UI)
  mongo-express:
    image: mongo-express
    container_name: phone-accessories-mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpassword
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=pass
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_AUTH_USERNAME=root
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=rootpassword
      - ME_CONFIG_SITE_BASEURL=/
      - ME_CONFIG_SITE_COOKIESECRET=cookiesecret123
      - ME_CONFIG_SITE_SESSIONSECRET=sessionsecret123
      - VCAP_APP_HOST=0.0.0.0
    networks:
      - microservices-network
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped

  # Admin Dashboard (Angular)
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile.fixed
    container_name: phone-accessories-admin
    environment:
      - API_URL=http://api.phoneaccessories.local/api
    ports:
      - "4200:4200"
    networks:
      - microservices-network
    depends_on:
      - auth-service
      - product-service
      - order-service
    restart: unless-stopped
    volumes:
      - ./logs/admin:/var/log/nginx

  # PostgreSQL (for Product service)
  postgres:
    image: postgres:14-alpine
    container_name: phone-accessories-postgres
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=products
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Favorites Service
  favorites-service:
    build: ./favorites-service
    container_name: phone-accessories-favorites
    environment:
      - SERVER_PORT=8080
      - MONGODB_HOST=mongo
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=favoritesdb
      - MONGODB_USERNAME=root
      - MONGODB_PASSWORD=rootpassword
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=phonesAccessoriesSecretKey123
    ports:
      - "8082:8080"
    networks:
      - microservices-network
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs/favorites:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for Favorites service)
  redis:
    image: redis:7-alpine
    container_name: phone-accessories-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

networks:
  microservices-network:
    driver: bridge

volumes:
  mongo-data:
  postgres-data:
  redis-data: